#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.1
#  in conjunction with Tcl version 8.6
#    Feb 17, 2020 03:45:19 PM CET  platform: Windows NT
from _overlapped import NULL
from select import select
from fileinput import filename


'''import des bibliotheques'''

#'''                            top1 est la premiere interface
            #                                          top2 est pour la 2eme interface                    '''
            
import sys
from tkinter import *
from tkinter.filedialog import asksaveasfile 
from tkinter import filedialog
from lib2to3.fixer_util import String
from lib2to3.pgen2.token import OP
import mysql.connector 
from dns.edns import PADDING
from pack import connexion
import pack.champs
import pack.table
import tkinter.messagebox


from builtins import print



try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import pack.unknown_support
import os.path


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top1 = Toplevel1 (root)
    pack.unknown_support.init(root, top1)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top1 = Toplevel1 (w)
    
    
    pack.unknown_support.init(w, top1, *args, **kwargs)
    return (w, top1)
  

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None
    global _img0

'''                                                        classe principale
                                                                 main                                   '''

class Toplevel1:


 
                                            #la methode principale contenant la premiere interface
    
    def __init__(self, top1=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#232323'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#ffffff' # X11 color: 'gray85'
        _ana1color = '#ffffff' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top1.geometry("1080x720+425+90")#  (425+90)dell  /  (+300+50)samsung 
        top1.minsize(120, 1)
        top1.maxsize(1924, 1061)
        top1.resizable(0, 0)
        top1.title("NX generator app")
        top1.iconbitmap(r"C:\mehdi\nx.ico")
        top1.configure(background="#ffffff")
    
                                            #label de la premiere page
        
        Label1 = tk.Label(top1)
        Label1.place(relx=0.0, rely=0.0, height=720, width=1080)
        Label1.configure(background="#232323")
        Label1.configure(disabledforeground="#a3a3a3")
        Label1.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,r"C:\mehdi\90.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        Label1.configure(image=_img0)
        Label1.configure(text='''Label''')
        
        Labelx = tk.Label(Label1)
        Labelx.place(relx=0.0, rely=0.0, height=720, width=1080)
        Labelx.configure(background="#232323")
        Labelx.configure(disabledforeground="#a3a3a3")
        Labelx.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,r"C:\mehdi\90.png")

        _img0 = tk.PhotoImage(file=photo_location)
        Labelx.configure(image=_img0)
        Labelx.configure(text='''Label''')

        host = tk.Entry(top1)
        host.place(relx=0.259, rely=0.264,height=20, relwidth=0.162)
        host.configure(background="white")
        host.configure(disabledforeground="#a3a3a3")
        host.configure(font="TkFixedFont")
        host.configure(foreground="#000000")
        host.configure(insertbackground="black")
        host.insert(END, 'localhost')


        user = tk.Entry(top1)
        user.place(relx=0.269, rely=0.417,height=20, relwidth=0.161)
        user.configure(background="white")
        user.configure(disabledforeground="#a3a3a3")
        user.configure(font="TkFixedFont")
        user.configure(foreground="#000000")
        user.configure(insertbackground="black")
        user.insert(END, 'root')

        pwd = tk.Entry(top1)
        pwd.place(relx=0.269, rely=0.563,height=19, relwidth=0.161)
        pwd.configure(background="white")
        pwd.configure(disabledforeground="#a3a3a3")
        pwd.configure(font="TkFixedFont")
        pwd.configure(foreground="#000000")
        pwd.configure(insertbackground="black")
        pwd.config(show="*")
        
    
        database = tk.Entry(top1)
        database.place(relx=0.269, rely=0.682,height=19, relwidth=0.161)
        database.configure(background="white")
        database.configure(disabledforeground="#a3a3a3")
        database.configure(font="TkFixedFont")
        database.configure(foreground="#000000")
        database.configure(insertbackground="black")
        database.insert(END, 'mysql')

                                            #fonction mentry pour faire un reset en cliquant sur x
        
        def mentry():
            host.delete(0,END)
            user.delete(0,END)
            pwd.delete(0,END)
            database.delete(0,END)

        host2 = tk.Entry(top1)
        host2.place(relx=0.63, rely=0.264,height=20, relwidth=0.162)
        host2.configure(background="white")
        host2.configure(disabledforeground="#a3a3a3")
        host2.configure(font="TkFixedFont")
        host2.configure(foreground="#000000")
        host2.configure(insertbackground="black")
        host2.insert(END, 'localhost')
        
        
        user2 = tk.Entry(top1)
        user2.place(relx=0.63, rely=0.417,height=20, relwidth=0.162)
        user2.configure(background="white")
        user2.configure(disabledforeground="#a3a3a3")
        user2.configure(font="TkFixedFont")
        user2.configure(foreground="#000000")
        user2.configure(insertbackground="black")
        user2.insert(END, 'root')

        pwd2 = tk.Entry(top1)
        pwd2.place(relx=0.63, rely=0.569,height=20, relwidth=0.162)
        pwd2.configure(background="white")
        pwd2.configure(disabledforeground="#a3a3a3")
        pwd2.configure(font="TkFixedFont")
        pwd2.configure(foreground="#000000")
        pwd2.configure(insertbackground="black")
        pwd2.config(show="*")

        database2 = tk.Entry(top1)
        database2.place(relx=0.63, rely=0.681,height=20, relwidth=0.162)
        database2.configure(background="white")
        database2.configure(disabledforeground="#a3a3a3")
        database2.configure(font="TkFixedFont")
        database2.configure(foreground="#000000")
        database2.configure(insertbackground="black")
        database2.insert(END, 'phpmyadmin')
                                            #2eme fonction mentry pour faire un reset en cliquant sur x
        
        def mentry2():
            host2.delete(0,END)
            user2.delete(0,END)
            pwd2.delete(0,END)
            database2.delete(0,END)

        Label2 = tk.Label(top1)
        Label2.place(relx=0.315, rely=0.23)
        Label2.configure(background="#171717")
        Label2.configure(disabledforeground="#09c0a3")
        Label2.configure(foreground="#ffffff")
        Label2.configure(text='''Host Src''',font="h1")
        

        Label3 = tk.Label(top1)
        Label3.place(relx=0.315, rely=0.383)
        Label3.configure(background="#171717")
        Label3.configure(disabledforeground="#a3a3a3")
        Label3.configure(foreground="#ffffff")
        Label3.configure(text='''User Src''',font="h1")

        Label4 = tk.Label(top1)
        Label4.place(relx=0.305, rely=0.527)
        Label4.configure(background="#171717")
        Label4.configure(disabledforeground="#a3a3a3")
        Label4.configure(foreground="#ffffff")
        Label4.configure(text='''Password Src''',font="h1")

        Label5 = tk.Label(top1)
        Label5.place(relx=0.305, rely=0.6485)
        Label5.configure(background="#171717")
        Label5.configure(disabledforeground="#a3a3a3")
        Label5.configure(foreground="#ffffff")
        Label5.configure(text='''Database Src''',font="h1")

        Label2_1 = tk.Label(top1)
        Label2_1.place(relx=0.677, rely=0.23)
        Label2_1.configure(activebackground="#f9f9f9")
        Label2_1.configure(activeforeground="black")
        Label2_1.configure(background="#171717")
        Label2_1.configure(disabledforeground="#a3a3a3")
        Label2_1.configure(foreground="#ffffff")
        Label2_1.configure(highlightbackground="#ffffff")
        Label2_1.configure(highlightcolor="black")
        Label2_1.configure(text='''Host Dest''',font="h1")

        Label3_2 = tk.Label(top1)
        Label3_2.place(relx=0.677, rely=0.382)
        Label3_2.configure(activebackground="#f9f9f9")
        Label3_2.configure(activeforeground="black")
        Label3_2.configure(background="#171717")
        Label3_2.configure(disabledforeground="#a3a3a3")
        Label3_2.configure(foreground="#ffffff")
        Label3_2.configure(highlightbackground="#ffffff")
        Label3_2.configure(highlightcolor="black")
        Label3_2.configure(text='''User Dest''',font="h1")

        Label4_3 = tk.Label(top1)
        Label4_3.place(relx=0.660, rely=0.536)
        Label4_3.configure(activebackground="#f9f9f9")
        Label4_3.configure(activeforeground="black")
        Label4_3.configure(background="#171717")
        Label4_3.configure(disabledforeground="#a3a3a3")
        Label4_3.configure(foreground="#ffffff")
        Label4_3.configure(highlightbackground="#ffffff")
        Label4_3.configure(highlightcolor="black")
        Label4_3.configure(text='''Password Dest''',font="h1")

        Label5_4 = tk.Label(top1)
        Label5_4.place(relx=0.657, rely=0.6475)
        Label5_4.configure(activebackground="#f9f9f9")
        Label5_4.configure(activeforeground="black")
        Label5_4.configure(background="#171717")
        Label5_4.configure(disabledforeground="#a3a3a3")
        Label5_4.configure(foreground="#ffffff")
        Label5_4.configure(highlightbackground="#ffffff")
        Label5_4.configure(highlightcolor="black")
        Label5_4.configure(text='''Database Dest''',font="h1")
        
        def on_enter(event):
            reset1.configure(text="Reset")
    
        def on_leave(enter):
            reset1.configure(text="X")
        
        reset1 = Button( text = "X",font="h1",fg="#ffffff",bg="#232323",command= mentry)
        reset1.place(x= 493, y=522)
        reset1.bind("<Enter>",on_enter)
        reset1.bind("<Leave>",on_leave)
        
        def on_enter2( event):
            reset2.configure(text="Reset")
    
        def on_leave2( enter):
            reset2.configure(text="X")
        
        reset2 = Button( text = "X",font="h1",fg="#ffffff",bg="#232323",command= mentry2)
        reset2.place(x= 877, y=524)
        reset2.bind("<Enter>",on_enter2)
        reset2.bind("<Leave>",on_leave2)
        
        
        

                                            #2eme interface (une methode) dans l'ancienne methode 
      
        
        def open_window():
            top2 = Toplevel()
            '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
            _bgcolor = '#ffffff'  # X11 color: 'gray85'
            _fgcolor = '#000000'  # X11 color: 'black'
            _compcolor = '#ffffff' # X11 color: 'gray85'
            _ana1color = '#ffffff' # X11 color: 'gray85'
            _ana2color = '#ececec' # Closest X11 color: 'gray92'
            style = ttk.Style()
            if sys.platform == "win32":
                style.theme_use('winnative')
            style.configure('.',background=_bgcolor)
            style.configure('.',foreground=_fgcolor)
            style.configure('.',font="TkDefaultFont")
            style.map('.',background=
                [('selected', _compcolor), ('active',_ana2color)])
            
            top2.geometry("1357x675+370+120") #(-0+0)pc (+370+120)dell (+150+60)samsung
            top2.minsize(120, 1)
            top2.maxsize(1924, 1061)
            top2.resizable(0, 0)
            top2.title("NX generator app")
            top2.configure(background="#ffffff")
            class Placeholder_State(object):
                __slots__ = 'normal_color', 'normal_font', 'placeholder_text', 'placeholder_color', 'placeholder_font', 'with_placeholder'
            
            def add_placeholder_to(entry, placeholder, color="grey", font=None):
                normal_color = entry.cget("fg")
                normal_font = entry.cget("font")
                
                if font is None:
                    font = normal_font
            
                state = Placeholder_State()
                state.normal_color=normal_color
                state.normal_font=normal_font
                state.placeholder_color=color
                state.placeholder_font=font
                state.placeholder_text = placeholder
                state.with_placeholder=True
                def on_focusin(event, entry=entry, state=state):
                    if state.with_placeholder:
                        entry.delete(0, "end")
                        entry.config(fg = state.normal_color, font=state.normal_font)
                    
                        state.with_placeholder = False
            
                def on_focusout(event, entry=entry, state=state):
                    if entry.get() == '':
                        entry.insert(0, state.placeholder_text)
                        entry.config(fg = state.placeholder_color, font=state.placeholder_font)
                        
                        state.with_placeholder = True
            
                entry.insert(0, placeholder)
                entry.config(fg = color, font=font)
            
                entry.bind('<FocusIn>', on_focusin, add="+")
                entry.bind('<FocusOut>', on_focusout, add="+")
                
                entry.placeholder_state = state
            
                return state   
            def new():
                top2.destroy()
                open_window()
                
            
            def sauvegarde(): 
                files = [('All Files', '*.*'),  
                         ('Python Files', '*.py'), 
                         ('Text Document', '*.txt')] 
                file = asksaveasfile(filetypes = files, defaultextension = files) 
                
            def open_file():
                filename=filedialog.askopenfilename(initialdir="/",title='Select a file',filetype=(("Text","*.txt"),("All files","*.*")))

            
            def about ():
                
                top4 = Toplevel()
                '''This class configures and populates the toplevel window.
                   top is the toplevel containing window.'''
                _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
                _fgcolor = '#000000'  # X11 color: 'black'
                _compcolor = '#d9d9d9' # X11 color: 'gray85'
                _ana1color = '#d9d9d9' # X11 color: 'gray85'
                _ana2color = '#ececec' # Closest X11 color: 'gray92'
        
                top4.geometry("832x643+425+111")
                top4.minsize(120, 1)
                top4.maxsize(1924, 1061)
                top4.resizable(0, 0)
                top4.title("About")
                top4.configure(background="#d9d9d9")
        

                Label3 = tk.Label(top4)
                Label3.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
                Label3.configure(background="#ffffff")
                Label3.configure(disabledforeground="#a3a3a3")
                Label3.configure(foreground="#000000")
                photo_location = os.path.join(prog_location,r"C:\mehdi\about7.png")
                global _imgx
                _imgx = tk.PhotoImage(file=photo_location)
                Label3.configure(image=_imgx)
                Label3.configure(text="Label")
   




            menubar = Menu(top2)
            filemenu = Menu(menubar, tearoff=0)
            filemenu.add_command(label="New", command=new)
            filemenu.add_command(label="Open", command=open_file)
            filemenu.add_command(label="Save", command=sauvegarde)
            filemenu.add_separator()
            filemenu.add_command(label="Exit", command=root.quit)
            menubar.add_cascade(label="File", menu=filemenu)
            
            helpmenu = Menu(menubar, tearoff=0)
            helpmenu.add_command(label="About...", command=about)
            menubar.add_cascade(label="Help", menu=helpmenu)
            
            top2.config(menu=menubar)
    
    
                                            #label contenant la 2eme image de l'interface
            Label1 = tk.Label(top2)
            Label1.place(relx=0.0, rely=0.0, height=675, width=1360)
            Label1.configure(background="#ffffff")
            Label1.configure(disabledforeground="#a3a3a3")
            Label1.configure(foreground="#000000")
            photo_location = os.path.join(prog_location,r"C:\mehdi\v52.png")
            global _img1
            _img1 = tk.PhotoImage(file=photo_location)
            Label1.configure(image=_img1)
            Label1.configure(text='''Label''')
            
 
            listbox_first= Listbox(top2)
            listbox_first.place(x=50, rely=0.23, relheight=0.67, relwidth=0.273)
            listbox_first.configure(background="#f4f4f4")
            
            scrollbary=Scrollbar(listbox_first)
            scrollbary.pack(side=RIGHT,fill="y")
            listbox_first.configure(yscrollcommand=scrollbary.set)
            scrollbary.config(command=listbox_first.yview)
            
                
            scrollbarx = Scrollbar(listbox_first, orient=HORIZONTAL)
            scrollbarx.pack(side=BOTTOM, fill=X)
            listbox_first.configure(xscrollcommand=scrollbarx.set)
            scrollbarx.config(command=listbox_first.xview)
            
            
            
            listbox2_second= Listbox(top2)
            listbox2_second.place(x=950, rely=0.23, relheight=0.67, relwidth=0.272)
            listbox2_second.configure(background="#f4f4f4")
            
            scrollbary=Scrollbar(listbox2_second)
            scrollbary.pack(side=RIGHT,fill="y")
            listbox2_second.configure(yscrollcommand=scrollbary.set)
            scrollbary.config(command=listbox2_second.yview)
                
            scrollbarx = Scrollbar(listbox2_second, orient=HORIZONTAL)
            scrollbarx.pack(side=BOTTOM, fill=X)
            listbox2_second.configure(xscrollcommand=scrollbarx.set)
            scrollbarx.config(command=listbox2_second.xview)
            
            style.configure('TNotebook.Tab', background=_bgcolor)
            style.configure('TNotebook.Tab', foreground=_fgcolor)
            style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
            
                        
            FrameButton = tk.Frame(top2)
            FrameButton.place(relx=0.38, rely=0.85, relheight=0.08, relwidth=0.220)
            FrameButton.configure(background="#232323")
            
            TNotebook1 = ttk.Notebook(top2)
            TNotebook1.place(relx=0.35, rely=0.26, relheight=0.575, relwidth=0.310)
            TNotebook1.configure(takefocus="")
            
            
            photo_location = os.path.join(prog_location,r"C:\mehdi\mapping.png")
            global _img14
            _img14 = tk.PhotoImage(file=photo_location)
            TNotebook1_t1 = tk.Frame(TNotebook1)
            TNotebook1.add(TNotebook1_t1, padding=3)
            TNotebook1.tab(0, text="Mapping",compound="left",underline="-1",image=_img14)
            TNotebook1_t1.configure(background="#f4f4f4")
            TNotebook1_t1.configure(highlightbackground="#ffffff")
            TNotebook1_t1.configure(highlightcolor="black")
            
            photo_location = os.path.join(prog_location,r"C:\mehdi\condition.png")
            global _img15
            _img15 = tk.PhotoImage(file=photo_location)
            TNotebook1_t2 = tk.Frame(TNotebook1)
            TNotebook1.add(TNotebook1_t2, padding=3)
            TNotebook1.tab(1, text="Conditions", compound="left", underline="-1",image=_img15)
            TNotebook1_t2.configure(background="#f4f4f4")
            TNotebook1_t2.configure(highlightbackground="#ffffff")
            TNotebook1_t2.configure(highlightcolor="black")
            
            photo_location = os.path.join(prog_location,r"C:\mehdi\matching.png")
            global _img13
            _img13 = tk.PhotoImage(file=photo_location)
            TNotebook1_t3 = ttk.Notebook(TNotebook1)
            TNotebook1.add(TNotebook1_t3, padding=3)
            TNotebook1.tab(2, text="Matching",compound="left",underline="-1",image=_img13)

            
            
            def myfunction1(event):
                Canvas1.configure(scrollregion=Canvas1.bbox("all"))
            
            def myfunction2(event):
                Canvas2.configure(scrollregion=Canvas2.bbox("all"))
            
            def myfunction3(event):
                Canvas3.configure(scrollregion=Canvas3.bbox("all"))
            
            def myfunction4(event):
                Canvas4.configure(scrollregion=Canvas4.bbox("all"))
            
            
            motherFrame1 = tk.Frame(TNotebook1_t1)
            motherFrame1.pack(expand=True)
            motherFrame1.configure(background="#f4f4f4")

            
            motherFrame2 = tk.Frame(TNotebook1_t2)
            motherFrame2.pack(expand=True)
            motherFrame2.configure(background="#f4f4f4")
            

            
            Canvas1=Canvas(motherFrame1,bg='#f4f4f4')
 
            Frame1Nb1 = tk.Frame(Canvas1)
            Frame1Nb1.place(relx=0, rely=0, relheight=1, relwidth=1)
            Frame1Nb1.configure(relief='groove')
            Frame1Nb1.configure(borderwidth="2")
            Frame1Nb1.configure(relief="groove")
            Frame1Nb1.configure(background="#f4f4f4")
            
            myscrollbar=Scrollbar(motherFrame1,orient="vertical",command=Canvas1.yview)
            Canvas1.configure(yscrollcommand=myscrollbar.set)
            
            myscrollbar.pack(side="right",fill="y")
            Canvas1.pack(side="left")
            Canvas1.create_window((30,0),window=Frame1Nb1,anchor='nw')
            Frame1Nb1.bind("<Configure>",myfunction1)
            
            
            
            Label1 = tk.Label(TNotebook1_t1)
            Label1.place(relx=0.19, rely=0.054, height=21, width=69)
            Label1.configure(background="#e0e0e0")
            Label1.configure(disabledforeground="#a3a3a3")
            Label1.configure(foreground="#000000")
            Label1.configure(text='From')
    
            Label2 = tk.Label(TNotebook1_t1)
            Label2.place(relx=0.59, rely=0.054, height=21, width=79)
            Label2.configure(background="#e0e0e0")
            Label2.configure(disabledforeground="#a3a3a3")
            Label2.configure(foreground="#000000")
            Label2.configure(text='To')
            
            
            Canvas2=Canvas(motherFrame2,bg='#f4f4f4')
            Canvas2.place(relx=50, rely=0, relheight=1, relwidth=1)

           
            Frame2Nb2 = tk.Frame(Canvas2)
            Frame2Nb2.configure(relief='groove')
            Frame2Nb2.configure(borderwidth="2")
            Frame2Nb2.configure(background="#f4f4f4")
            
            myscrollbar2=Scrollbar(motherFrame2,orient="vertical",command=Canvas2.yview)
            Canvas2.configure(yscrollcommand=myscrollbar2.set)
            
            myscrollbar2.pack(side="right",fill="y")
            Canvas2.pack(side="left")
            Canvas2.create_window((0,0),window=Frame2Nb2,anchor='nw')
            Frame2Nb2.bind("<Configure>",myfunction2)
            
            

            
            matched_tab = tk.Frame(TNotebook1_t3) 
            TNotebook1_t3.add(matched_tab, padding=3)
            TNotebook1_t3.tab(0, text="Matched",compound="left",underline="-1")
            

            Canvas3=Canvas(matched_tab,bg='#f4f4f4')
            
            Frame3Nb3 = tk.Frame(Canvas3)
            Frame3Nb3.place(relx=0, rely=0, relheight=1, relwidth=1)
            Frame3Nb3.configure(relief='groove')
            Frame3Nb3.configure(borderwidth="2")
            Frame3Nb3.configure(background="#f4f4f4")
            
            myscrollbar3=Scrollbar(matched_tab,orient="vertical",command=Canvas3.yview)
            Canvas3.configure(yscrollcommand=myscrollbar3.set)
            
            myscrollbar3.pack(side="right",fill="y")
            Canvas3.pack(side="left")
            Canvas3.create_window((30,0),window=Frame3Nb3,anchor='nw')
            Frame3Nb3.bind("<Configure>",myfunction3)
            
                        
            not_matched_tab = tk.Frame(TNotebook1_t3) 
            TNotebook1_t3.add(not_matched_tab, padding=3)
            TNotebook1_t3.tab(1, text="Not Matched",compound="left",underline="-1")
            
            Canvas4=Canvas(not_matched_tab,bg='#f4f4f4')
            
            Frame4Nb4 = tk.Frame(Canvas4)
            Frame4Nb4.place(relx=0, rely=0, relheight=1, relwidth=1)
            Frame4Nb4.configure(relief='groove')
            Frame4Nb4.configure(borderwidth="2")
            Frame4Nb4.configure(background="#f4f4f4")
            
            myscrollbar4=Scrollbar(not_matched_tab,orient="vertical",command=Canvas4.yview)
            Canvas4.configure(yscrollcommand=myscrollbar4.set)
            
            myscrollbar4.pack(side="right",fill="y")
            Canvas4.pack(side="left")
            Canvas4.create_window((30,0),window=Frame4Nb4,anchor='nw')
            Frame4Nb4.bind("<Configure>",myfunction4)
    
    

            label_operator=tk.Label(TNotebook1_t2)
            label_operator.place(x=180,rely=0.054)
            label_operator.configure(text="Operator")
            label_operator.configure(background="#e0e0e0")
            

            label_value=tk.Label(TNotebook1_t2)
            label_value.configure(text="Value")
            label_value.place(x=320,rely=0.054)
            label_value.configure(background="#e0e0e0")
            
            label_operatedColumn=tk.Label(TNotebook1_t2)
            label_operatedColumn.configure(text="Operated Column")
            label_operatedColumn.place(x=30,rely=0.054)
            label_operatedColumn.configure(background="#e0e0e0")
            
            
            dest_Column=tk.Label(matched_tab)
            dest_Column.configure(text="Operator")
            dest_Column.place(relx=0.05,rely=0.01)
            dest_Column.configure(background="#e0e0e0")
            
            label_operator_matc=tk.Label(matched_tab)
            label_operator_matc.place(relx=0.3,rely=0.01)
            label_operator_matc.configure(text="Source Column")
            label_operator_matc.configure(background="#e0e0e0")
              
            Source_Column=tk.Label(matched_tab)
            Source_Column.configure(text="Target Column")
            Source_Column.place(relx=0.63,rely=0.01)
            Source_Column.configure(background="#e0e0e0")
            
            
            not_match_column=tk.Label(not_matched_tab)
            not_match_column.configure(text="Column")
            not_match_column.place(relx=0.3,rely=0.01)
            not_match_column.configure(background="#e0e0e0")

            
            not_match_value=tk.Label(not_matched_tab)
            not_match_value.configure(text="Value")
            not_match_value.place(relx=0.675,rely=0.01)
            not_match_value.configure(background="#e0e0e0")
            


            
            
                                            #recuperation des inputs pour afficher les tables de chaque base
                
            host_1=host.get()
            user_1=user.get()
            pass_1=pwd.get()
            database_1=database.get()
                
            host_2=host2.get()
            user_2=user2.get()
            pass_2=pwd2.get()
            database_2=database2.get()
                
                
                                            #import des fonctions show tables a partir du fichier table
                
            
            
            mytable=pack.table.tables ("",host_1,user_1, pass_1,database_1)
            
            mytable2=pack.table.tables ("",host_2,user_2, pass_2,database_2)
          
          
                                                    # afficher les nom des champs des tables selectionnées de la 1ere base
              
           
            
              
            
            def action(event):
                global select
                
                
                listbox_first.delete(0, END)
        
                select= listeComboSource.get() 
                
                mydb=mysql.connector.connect(host=host_1,user=user_1,password=pass_1, database=database_1)
                mycursor = mydb.cursor()
                mycursor.execute("SHOW COLUMNS from %s"%select)
                myresult= mycursor.fetchall()
                
               
               
                for x,y in enumerate(myresult):
                    
                    listbox_first.insert(x+1,y[0:2])
                    

                listeComboSource.config(values=mytable)
                
               
            search_var1= tk.StringVar()
            search_var1.set('               Choose a Table')
            search_var1.trace("w",lambda name, index, mode:updateList1())
            newListe=[]
            

  
            listeComboSource = ttk.Combobox(top2,values=mytable)
            listeComboSource.current(0)
            listeComboSource.pack() 
            listeComboSource.place(x=125,y=120, width=200,height=23)
            listeComboSource.bind("<<ComboboxSelected>>", action)
            listeComboSource.configure(textvariable=search_var1) 

            

           
                                                    #recherche dynamique des tables
           
            def updateList1():
                search_term=search_var1.get()
                newListe.clear()
                for item in mytable:
                    if search_term.lower() in item.lower():
                        newListe.insert(len(newListe),item)
                listeComboSource.config(values=newListe)
            
                                                    #apres un double clikc sur listbox pour jointure

           

            list_entry_from=[]
            Entry_From = tk.Entry(Frame1Nb1,width=25)
            list_entry_from.append(Entry_From)
            Entry_From.grid(row=0, column=0,padx=7,pady=30)
 



            def from_input(self):
            

                    get_from=listbox_first.get(ANCHOR)
                    
                    for i in range(0,len(list_entry_from)):
                        
                        if (list_entry_from[i].get())=="":
                            list_entry_from[i].insert(0,select)
                            list_entry_from[i].insert(END,'.')
                            list_entry_from[i].insert(END,get_from[0])
                            break
 

                                                    
                                                    #apres un double clikc sur listbox pour premier les conditions
            
            
            
            

            list_operated=[]
            op_col = tk.Entry(Frame2Nb2,width=20)
            list_operated.append(op_col)
            op_col.grid(row=0, column=0,padx=0 , pady=30)

                        
            def add_hint(self):
                var2=operator1.get()
                if var2=="BETWEEN":
                    condition_value1.config(state="normal")
                    condition_value1.delete(0, END)
                    add_placeholder_to(condition_value1, '[min : max]')
                    
                
                elif var2=="IN":
                    condition_value1.config(state="normal")
                    condition_value1.delete(0, END)
                    add_placeholder_to(condition_value1, '( value )')
                    
                        
                elif var2=="LIKE":
                    condition_value1.config(state="normal")
                    condition_value1.delete(0, END)
                    add_placeholder_to(condition_value1, '% value %')
                    
                        
                        
                elif var2=="IS NULL" or var2=="IS NOT NULL":
                    condition_value1.delete(0, END)
                    condition_value1.config(state="disabled")
                
                elif var2!="IS NULL" and var2!="IS NOT NULL":
                    condition_value1.config(state="normal")
                    
                elif var2!="BETWEEN" and var2!="IN" and var2!="LIKE":
                    condition_value1.delete(0, END)
            
            list_operators =[]
            operator1 = ttk.Combobox(Frame2Nb2,values=["=","!=",">","<",">=","<=",'IN',"BETWEEN","LIKE","IS NULL","IS NOT NULL"],width=12)
            list_operators.append(operator1)
            operator1.grid(row=0, column=1,padx=15 ,pady=30)
            operator1.bind("<<ComboboxSelected>>", add_hint)
            
            
            
            list_condition_values=[]
            condition_value1 = tk.Entry(Frame2Nb2,width=20)
            list_condition_values.append(condition_value1)
            condition_value1.grid(row=0, column=2 ,pady=30)
            

 
            def condition (self):

                
                get_condition= listbox_first.get(ANCHOR) 
                
                for i in range(0,len(list_operated)):
                    
                    if (list_operated[i].get())=="":
                        list_operated[i].insert(END,get_condition[0])
                        break    
                



            
            
            list_match_src=[]
            match_source=tk.Entry(Frame3Nb3)
            list_match_src.append(match_source)
            match_source.grid(row=0, column=1,padx=7,pady=30)
            
            list_operators_match=[]
            operator_match= ttk.Combobox(Frame3Nb3,values=["Update","Delete"],width=10)
            list_operators_match.append(operator_match)
            operator_match.grid(row=0,column=0,padx=7 ,pady=20)

            def match (self):

                get_match_src=listbox_first.get(ANCHOR)
                for i in range(0,len(list_match_src)):
                    if (list_match_src[i].get())=="":  
                        list_match_src[i].insert(END,get_match_src[0])
                        break   
                                    

           
            list_not_match_src=[]
            not_match_source=tk.Entry(Frame4Nb4)
            list_not_match_src.append(not_match_source)
            not_match_source.grid(row=0, column=1,padx=7,pady=30)
            

            a=Label(Frame4Nb4,text="Insert")
            a.grid(row=0,column=0,padx=7 ,pady=20)

            def not_match (self):

                get_not_match_src=listbox2_second.get(ANCHOR)
                for i in range(0,len(list_not_match_src)):
                    if (list_not_match_src[i].get())=="":  
                        list_not_match_src[i].insert(END,get_not_match_src[0])
                        break                                           # afficher les noms des champs des tables selectionnées de la 2ere base

           
            def action2(event):
                global select2
                listbox2_second.delete(0, END)
        
                select2= listeComboDestination.get() 
                
                mydb=mysql.connector.connect(host=host_2,user=user_2,password=pass_2, database=database_2)
                mycursor = mydb.cursor()
                mycursor.execute("SHOW COLUMNS from %s"%select2)
                myresult= mycursor.fetchall()
                
                
               
                
                for x,y in enumerate(myresult):
                    listbox2_second.insert(x+1,y[0:2])
           

                listeComboDestination.config(values=mytable2)
                
            search_var2= tk.StringVar()
            search_var2.set('               Choose a Table')
            search_var2.trace("w",lambda name, index, mode:updateList2())
            newListe2=[]
            
            
            listeComboDestination = ttk.Combobox(top2,values=mytable2)
            listeComboDestination.current(0) 
            listeComboDestination.pack() 
            listeComboDestination.place(x=1030,y=120, width=205,height=23)
            listeComboDestination.bind("<<ComboboxSelected>>", action2)
            listeComboDestination.configure(textvariable=search_var2) 
            
            
            def updateList2():
                search_term=search_var2.get()
                newListe2.clear()
                for item in mytable2:
                    if search_term.lower() in item.lower():
                        newListe2.insert(len(newListe2),item)
                listeComboDestination.config(values=newListe2)
                
            
            
            list_entry_to=[]
            Entry_To = tk.Entry(Frame1Nb1,width=25)
            list_entry_to.append(Entry_To)
            Entry_To.grid(row=0, column=1,padx=7,pady=30)
            
            
            def to_input(self):
               
                get_to=listbox2_second.get(ANCHOR)
                
                
                for i in range(0,len(list_entry_to)):
                    
                    if (list_entry_to[i].get())=="":
                        list_entry_to[i].insert(0,select2)
                        list_entry_to[i].insert(END,'.')
                        list_entry_to[i].insert(END,get_to[0])
                        break  
                                               

            
            
            
            list_match_dest=[]
            match_destination=tk.Entry(Frame3Nb3)
            list_match_dest.append(match_destination)
            match_destination.grid(row=0, column=2,padx=7,pady=30)    

            
            def match2 (self):

                
                get_match_dest=listbox2_second.get(ANCHOR)
                for i in range(0,len(list_match_dest)):
                    if (list_match_dest[i].get())=="":  
                        list_match_dest[i].insert(END,get_match_dest[0])
                        break   
                    
            
            
            
            list_not_match_dest=[]
            not_match_destination=tk.Entry(Frame4Nb4)
            list_not_match_dest.append(not_match_destination)
            not_match_destination.grid(row=0, column=2,padx=7,pady=30)    

            
            def not_match2 (self):

                
                get_not_match_dest=listbox2_second.get(ANCHOR)
                for i in range(0,len(list_not_match_dest)):
                    if (list_not_match_dest[i].get())=="":  
                        list_not_match_dest[i].insert(END,get_not_match_dest[0])
                        break           
                
            def listbox_action (self):    
                if(TNotebook1.index("current")==0):    
                    listbox_first.bind('<Double-Button-1>',from_input)
                    listbox2_second.bind('<Double-Button-1>',to_input)
                    listbox2_second.configure(state="normal")
                    listbox_first.configure(state="normal")
                
                elif (TNotebook1.index("current")==1): 
                    listbox_first.bind('<Double-Button-1>',condition)
                    listbox2_second.configure(state="disabled")
                    listbox_first.configure(state="normal")
                    

                elif(TNotebook1.index("current")==2):    
                    listbox_first.bind('<Double-Button-1>',match)
                    listbox2_second.bind('<Double-Button-1>',match2)
                    listbox2_second.configure(state="normal")
                    listbox_first.configure(state="normal")

  
                
            TNotebook1.bind("<<NotebookTabChanged>>", listbox_action)     
                
                
            def listbox_action2 (self):    

                if   (TNotebook1_t3.index("current")==1):     
                
                    listbox2_second.bind('<Double-Button-1>',not_match)
                    listbox_first.configure(state="disabled")
                    
                elif(TNotebook1.index("current")==2):
                        
                    listbox_first.bind('<Double-Button-1>',match)
                    listbox2_second.bind('<Double-Button-1>',match2)
                    listbox2_second.configure(state="normal")
                    listbox_first.configure(state="normal")
                    
  
                    
                                   

            TNotebook1_t3.bind("<<NotebookTabChanged>>", listbox_action2)
            
                    
                    
                        

            
            list_button=[]
            global i
            i=1
            def add_entry():
                global i
                Entry_From = tk.Entry(Frame1Nb1,width=25)
                list_entry_from.append(Entry_From)
                Entry_From.grid(row=i, column=0,padx=7,pady=20)
                
                Entry_To = tk.Entry(Frame1Nb1,width=25)
                list_entry_to.append(Entry_To)
                Entry_To.grid(row=i,column=1,padx=7,pady=20)
                
                
                
                x = len(list_entry_from)-1
                
               
                delete_button=Button(Frame1Nb1,text='X',command=lambda:delete_row(x))
                list_button.append(delete_button)
                delete_button.grid(row=i,column=2,padx=7,pady=20)
                
                i=i+1       
                

                                

            def delete_row(ixx):
                
                print(ixx)
                
                list_entry_from[ixx].destroy()
                list_entry_to[ixx].destroy()
                list_button[ixx-1].destroy()
                del list_entry_from[ixx]
                del list_entry_to[ixx]
            

            
            global j        
            j=1
            def add_condition():
                global j
                
   
                op_col=tk.Entry(Frame2Nb2,width=20)
                list_operated.append(op_col)
                op_col.grid(row=j, column=0,padx=0  ,  pady=30)
                

                
                def add_hint2(self):
                    var=operator.get()
                    
                    if var=="BETWEEN":
                        condition_value.config(state="normal")
                        condition_value.delete(0, END)
                        add_placeholder_to(condition_value, '[min : max]')

                    
                    elif var=="IN":
                        condition_value.config(state="normal")
                        condition_value.delete(0, END)
                        add_placeholder_to(condition_value, '( value )')

                        
                    elif var=="LIKE":
                        condition_value.config(state="normal")
                        condition_value.delete(0, END)
                        add_placeholder_to(condition_value, '% value %')
                        
                        
                        
                    elif var=="IS NULL" or var=="IS NOT NULL":
                        condition_value.delete(0, END)
                        condition_value.config(state="disabled")
                
                    elif var!="IS NULL" or var!="IS NOT NULL":
                        condition_value.config(state="normal")
                    
                    elif var!="BETWEEN" and var!="IN" and var!="LIKE":
                        condition_value.delete(0, END)
                        
                
                operator= ttk.Combobox(Frame2Nb2,values=["=","!=",">","<",">=","<=",'IN',"BETWEEN","LIKE","IS NULL","IS NOT NULL"],width=12)
                list_operators.append(operator)
                operator.grid(row=j,column=1,padx=15 ,pady=30)
                operator.bind("<<ComboboxSelected>>", add_hint2)

                

                
                
                condition_value = tk.Entry(Frame2Nb2,width=20)
                list_condition_values.append(condition_value)
                condition_value.grid(row=j,column=2, pady=30)
                
                j=j+1

                
 

  

            global c
            c=1
            def add_match():
                global c
                
                operator_match= ttk.Combobox(Frame3Nb3,values=["Update","Delete"],width=10)
                list_operators_match.append(operator_match)
                operator_match.grid(row=c,column=0,padx=7 ,pady=20)
                
                match_source=tk.Entry(Frame3Nb3)
                list_match_src.append(match_source)
                match_source.grid(row=c, column=1,padx=7,pady=20)
                
                
                match_destination=tk.Entry(Frame3Nb3)
                list_match_dest.append(match_destination)
                match_destination.grid(row=c, column=2,padx=7,pady=20)
                
                c=c+1                
                
            global f
            f=1
            def add_match2():
                global f
                
                lab=Label(Frame4Nb4,text="Insert")
                lab.grid(row=f,column=0,padx=7 ,pady=20)
                
                not_match_source=tk.Entry(Frame4Nb4)
                list_not_match_src.append(not_match_source)
                not_match_source.grid(row=f, column=1,padx=7,pady=20)
                
                
                not_match_destination=tk.Entry(Frame4Nb4)
                list_not_match_dest.append(not_match_destination)
                not_match_destination.grid(row=f, column=2,padx=7,pady=20)
                
                f=f+1       
                
                
            photo_location = os.path.join(prog_location,r"C:\mehdi\add.png")
            global _img1a
            _img1a = tk.PhotoImage(file=photo_location)    
                
            Apply_Button_mapping = tk.Button(TNotebook1_t1,text="  Add",command=add_entry,image=_img1a,compound="left")
            Apply_Button_mapping.place(relx=0.35, rely=0.90, height=35, width=86)
            
            Apply_Button_condition = tk.Button(TNotebook1_t2,text="  Add",command=add_condition,image=_img1a,compound="left")
            Apply_Button_condition.place(relx=0.35, rely=0.89, height=35, width=86)

            Apply_Button_matching = tk.Button(matched_tab,text="  Add",command=add_match,image=_img1a,compound="left")
            Apply_Button_matching.place(relx=0.35, rely=0.89, height=35, width=86)
            
            Apply_Button_matching = tk.Button(not_matched_tab,text="  Add",command=add_match2,image=_img1a,compound="left")
            Apply_Button_matching.place(relx=0.35, rely=0.89, height=35, width=86)


            
            
                    
              
              
                                            #2 champs txt pour contenir les champs de la table selectionnée
    
           
    
            
            
            '''Button2 = tk.Button(top2)
            Button2.place(relx=0.790, rely=0.8318, height=35, width=86)
            Button2.configure(activebackground="#ececec")
            Button2.configure(activeforeground="#000000")
            Button2.configure(background="#09c0a3")
            Button2.configure(disabledforeground="#a3a3a3")
            Button2.configure(foreground="#ffffff")
            Button2.configure(highlightbackground="#ffffff")
            Button2.configure(highlightcolor="black")
            Button2.configure(pady="0")
            Button2.configure(text=Create Table')
            Button2.configure(command="#")
            Button2 = tk.Button(top2)    '''      

            
            
                                            #une fonction show pour reduire la nouvelle interface et reouvrir l'ancienne
            
            
            def show():
                top2.destroy()
                top1.deiconify()
   
            Button1 = tk.Button(top2)
            Button1.place(relx=0, rely=0.925, height=35, width=86)
            Button1.configure(activebackground="#ececec")
            Button1.configure(activeforeground="#000000")
            Button1.configure(background="#232323")
            Button1.configure(disabledforeground="#a3a3a3")
            Button1.configure(foreground="#09c0a3")
            Button1.configure(highlightbackground="#ffffff")
            Button1.configure(highlightcolor="black")
            Button1.configure(pady="0")
            Button1.configure(text='''< Back''')
            Button1.configure(command=show)
            Button1 = tk.Button(top2)
            
            ''''v=tk.IntVar()
            Button_sql=Radiobutton(FrameButton,text="SQL",variable=v,value=1)
            Button_sql.configure(background="#ffffff")
            Button_sql.place(relx=0.07, rely=0.55)
            
            
            Button_adl=Radiobutton(FrameButton,text="ADL",variable=v,value=2)
            Button_adl.configure(background="#ffffff")
            Button_adl.place(relx=0.07, rely=0.1)'''

            def requete():
                global txt

                for nb in range (0,len(list_operated)):
                    if list_operated[nb].get():
                        show_condition=True
                        break
                    else :
                        show_condition=False

             
                    
                requete='MERGE INTO '+select2+ '\n' +'USING (SELECT *'
 
                requete=requete+'\n'+'    FROM ' +select +'\n'+'\n'
                
                if show_condition==True :
                    
                    requete=requete+'    WHERE '
    
                    for i in range (0,len(list_operated)):
                        
                        if list_operated[i].get() and list_operators[i].get()!="IS NULL" and list_operators[i].get()!="IS NOT NULL":
                            requete=requete+list_operated[i].get()+' '+list_operators[i].get()+' '+'"'+list_condition_values[i].get()+'"'
                            
                            requete=requete+'\n'+'    AND '
                        
                        if list_operated[i].get() and list_operators[i].get()=="IS NULL" or list_operators[i].get()=="IS NOT NULL":
                            requete=requete+list_operated[i].get()+' '+list_operators[i].get()
                            
                            requete=requete+'\n'+'    AND '
                             
                                
                             
                    requete=requete[:len(requete)-4]
                    
                        
                   
                requete=requete+') PCC'
                    
                requete=requete+'\n'+'\n'+'ON ( '
                    
                for i in range (0,len(list_entry_from)):
                    requete=requete +list_entry_to[i].get()+' = '+list_entry_from[i].get()+ '\n'+'    AND '
                        

                requete=requete[:len(requete)-4]
                    
                requete=requete+')'
                    
                requete=requete+'\n'+'\n'+'WHEN MATCHED THEN'
                
                for i in range (0,len(list_match_dest)):
                    if list_match_src[i].get():
                        requete=requete+'\n'+list_operators_match[i].get()+" " +list_match_dest[i].get()+' = ( PCC.'+list_match_src[i].get()+' )'
                    
               
                    
                requete=requete+'\n'+'WHEN NOT MATCHED THEN'
                    
                requete=requete+'\n'+'    INSERT ('
                    
                for i in range (0,len(list_not_match_src)):
                    requete=requete+list_not_match_src[i].get()+' , '
                        
                requete=requete[:len(requete)-2]    
                requete=requete+')'
                    
                requete=requete+'\n'+'    VALUES ('
                for i in range (0,len(list_not_match_src)):
                    requete=requete+list_not_match_dest[i].get()
                    requete=requete+'\n'+'        '
                requete=requete+')'
                    
                    
                txt=requete
                return(requete)
                
                
                    
                    


                        
      
                    
            def text():
                
                file=open("SQL Request.txt","w")
                file.write(txt)
                file.close   
            
            def generate():
                
                for l in range (0,len(list_entry_from)) :
                    if  (list_entry_from[l].get())!="" and (list_entry_to[l].get())!="" :
                        check_mapping=True
                    else :
                        check_mapping=False 
                        tkinter.messagebox.showinfo("Mapping"," Entries musn't be empty ") 
                
                for m in range (0,len(list_operated)) :
                    
                    if list_condition_values[m].get()=='[min : max]' or list_condition_values[m].get()=='( value )' or list_condition_values[m].get()=='% value %' :
                        list_condition_values[m].delete(0,END)
                        
                    
                    if list_operated[m].get() and list_operators[m].get() and list_condition_values[m].get() :
                        check_condition=True
                        
                    elif list_operated[m].get()=="" and list_operators[m].get()=="" and list_condition_values[m].get()=="" :
                        check_condition=True
                        
                    elif list_operated[m].get() and list_operators[m].get()=="IS NULL"   and list_condition_values[m].get()=="" :
                        check_condition=True
                    
                    elif list_operated[m].get() and list_operators[m].get()=="IS NOT NULL"  and list_condition_values[m].get()=="" :
                        check_condition=True
                    
                    else:
                        check_condition=False
                        tkinter.messagebox.showinfo("Conditions"," Empty Space(s) ") 
                    
                        break
                
                if list_operators_match[0].get() and list_match_src[0].get() and list_match_dest[0].get() :
                    check_matching=True
                else : 
                    check_matching=False
                    tkinter.messagebox.showinfo("Matching"," Please fill the empty space(s) ")
                for n in range (1,len(list_match_src)):
                    
                    if list_operators_match[n].get() and list_match_src[n].get() and list_match_dest[n].get() :
                        check_matching=True
                    
                    elif list_operators_match[n].get()=="" and list_match_src[n].get()=="" and list_match_dest[n].get()=="" :
                        check_matching=True
                    
                    else : 
                        check_matching=False
                        tkinter.messagebox.showinfo("Matching"," Please fill the empty space(s) ")
                        break
                
                if  check_mapping==True and check_condition==True and check_matching==True :  
                     
                    top3 = Toplevel()
                    '''This class configures and populates the toplevel window.
                       top is the toplevel containing window.'''
                    _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
                    _fgcolor = '#000000'  # X11 color: 'black'
                    _compcolor = '#d9d9d9' # X11 color: 'gray85'
                    _ana1color = '#d9d9d9' # X11 color: 'gray85'
                    _ana2color = '#ececec' # Closest X11 color: 'gray92'
            
                    top3.geometry("600x700+650+150")
                    top3.minsize(120, 1)
                    top3.maxsize(1924, 1061)
                    top3.resizable(0, 0)
                    top3.title("SQL Request")
                    top3.configure(background="#d9d9d9")
            
                    Frame1 = tk.Frame(top3)
                    Frame1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
                    Frame1.configure(relief='groove')
                    Frame1.configure(borderwidth="2")
                    Frame1.configure(relief="groove")
                    Frame1.configure(background="#d9d9d9")
            
                    Text1 = tk.Text(Frame1)
                    Text1.place(relx=0.017, rely=0.014, relheight=0.886, relwidth=0.967)
                    Text1.configure(background="white")
                    Text1.configure(font="TkTextFont")
                    Text1.configure(foreground="black")
                    Text1.configure(highlightbackground="#d9d9d9")
                    Text1.configure(highlightcolor="black")
                    Text1.configure(insertbackground="black")
                    Text1.configure(selectbackground="#c4c4c4")
                    Text1.configure(selectforeground="black")
                    Text1.configure(wrap="word")  
                    Text1.insert(INSERT, requete())
                    
                    photo_location = os.path.join(prog_location,r"C:\mehdi\save.png")
                    global _img12
                    _img12 = tk.PhotoImage(file=photo_location)
                    save_button = Button(Frame1, text = '  Save',image=_img12,compound="left")
                    save_button.place(relx=0.4, rely=0.92, height=40,width=100)
                    save_button.configure(command=text)

                    
                        

                

            
             
             
            photo_location = os.path.join(prog_location,r"C:\mehdi\tik3.png")
            global _img11
            _img11 = tk.PhotoImage(file=photo_location)
            Button2 = Button(FrameButton, text = '  Generate',image=_img11,compound="left")
            Button2.place(relx=0.28, rely=0.15,height=40, width=125)
            Button2.configure(activebackground="#ececec")
            Button2.configure(activeforeground="#09c0a3")
            Button2.configure(background="#232323")
            Button2.configure(disabledforeground="#a3a3a3")
            Button2.configure(foreground="#09c0a3")
            Button2.configure(highlightbackground="#ffffff")
            Button2.configure(highlightcolor="black")
            Button2.configure(pady="0")
            Button2.configure(command=generate)
            Button2.configure(font="-family {inherit} -size 12 -weight bold")        
            
            

            
            
            
            
             
            
        
                                #save info verifie les champs puis fais un appel a la fonction connect d'un autre fichier connexion et affiche les messages d'erreus  
                
        def save_info ():
            x=False
            y=False
            z=False
            w=False
            host_1=host.get()
            user_1=user.get()
            pass_1=pwd.get()
            database_1=database.get()
            
            host_2=host2.get()
            user_2=user2.get()
            pass_2=pwd2.get()
            database_2=database2.get()
            
            
            
            
                
            if database.get():
                z=True
            else:
                    # the mandatory field is empty
                a = Label(text="Required entry",bg="#232323",fg="#ff0000")
                a.place(x=330,y=512)    
                 
            
            
            if database2.get():
                w=True
            else:
                    # the mandatory field is empty
                a = Label(text="Required entry",bg="#232323",fg="#ff0000")
                a.place(x=720,y=510)     
            
            
            
            '''
                import de la classe connexion
                faire un bloc try catch au cas d'echec de connexion afficher message box et 
            '''
            
           
               
            
            try:
                connexion.connect ("",host_1,user_1, pass_1,database_1)
                #print("Database 1 connected")
                x=True
            except:
                print()
                
           
            
            try:
                connexion.connect ("",host_2,user_2, pass_2,database_2)
                #print("Database 2 connected")
                y=True
                  
                
            except:
                print()
                
            
            
            
            
            
            if x==False and \
               y==False:
                tkinter.messagebox.showinfo("Error"," Unable to connect to both databases. \n\n Please check your login informations! ")
                
                
            elif x==False and \
                 y==True:
                tkinter.messagebox.showinfo("Error"," Unable to connect to the 1st database. \n\n  Please check your login informations! ")    
                
            elif x==True and \
                 y==False:
                tkinter.messagebox.showinfo("Error"," Unable to connect to the 2nd database. \n\n  Please check your login informations! ")    
                
                
            if  x == True and \
                y == True and \
                w == True and \
                z == True:
                open_window()
                top1.withdraw()
                
                    
            
            
           
            
            
           
           
            

    
         
       
        
        Button1 = tk.Button(top1)
        Button1.place(relx=0.472, rely=0.792, height=35, width=86)
        Button1.configure(activebackground="#ececec")
        Button1.configure(activeforeground="#ffffff")
        Button1.configure(background="#09c0a3")
        Button1.configure(command=save_info)
        Button1.configure(disabledforeground="#a3a3a3")
        Button1.configure(foreground="#ffffff")
        Button1.configure(highlightbackground="#ffffff")
        Button1.configure(highlightcolor="black")
        Button1.configure(pady="0")
        Button1.configure(text='''Connect''')
        Button1.configure(font="-family {Segoe UI} -size 10 -weight bold")

        
       
       
        
        
       
       
        
  
        
if __name__ == '__main__':
    vp_start_gui()





